package com.ppp;

import com.ppp.exploit.Exploit;
import com.ppp.exploit.ExploitPayload;
import com.ppp.sinks.annotation.EnchantType;
import com.ppp.sinks.annotation.Sink;
import com.ppp.utils.maker.ClassUtils;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * @author Whoopsunix
 */
public class ExploitBuilder {
    private static final String exploitPackageName = "com.ppp.exploit";

    public static void run(Class<? extends ExploitPayload> exploitClass, Object gadget, ExploitHelper exploitHelper) throws Exception {
        Printer.title(exploitClass.getSimpleName());
        ExploitPayload exploitPayload = exploitClass.newInstance();
        exploitPayload.exploit(gadget, exploitHelper);
    }

    public static Class<? extends ExploitPayload> getExploitClass(String exploit) throws Exception {
        // 调用链检查
        List<Class<?>> classes = ClassUtils.getClasses(exploitPackageName);
        for (Class<?> clazz : classes) {
            String className = clazz.getSimpleName();
            if (className.equalsIgnoreCase(exploit)) {
                return (Class<? extends ExploitPayload>) clazz;
            }
        }
        Printer.warn(String.format("No such exploit: %s", exploit));
        showGadgetClass();
        return null;
    }

    public static void showGadgetClass() throws Exception {
        List<Class<?>> classes = ClassUtils.getClasses(exploitPackageName);
        ArrayList exploits = new ArrayList();

        for (Class<?> clazz : classes) {
            Exploit annotation = clazz.getAnnotation(Exploit.class);
            if (annotation != null)
                exploits.add(clazz.getSimpleName());
        }
        Printer.blueInfo("Exploit: " + exploits);

        System.exit(0);
    }
}
